Version 3.5 of Python                            Maria Paola Ferri
python-001
1) x=7
   print (x) 
2) y=3.14
3) x%2==0
	False 
		#to see if the given number x is even or not
4) s=[x,y]
   average = sum(s)/len(s)
	
5)import fabs from math
  distance_x=math.fabs(x-average)     #function .fabs to consider only positive values
>>>1.9299999999
   distance_y=math.fabs(y-average)
>>>1.9300000002

6)s =[distance_x,distance_y]
  average= sum(s)/len(s)
  print (average)

7) z = (2*x)-1
>>>z
>>>13

8) y=3.14
>>> z%2==0
False
>>> s=[y,z]
>>> average = sum(s)/len(s)
>>> average
10.0
>>> from math import fabs
>>> distance_z=math.fabs(z-average)
>>> distance_z
3.0
>>> distance_y=math.fabs(y-average)
>>> distance_y
6.859999999999999
>>> s = [distance_z,distance_y]
>>> average = sum(s)/len(s)
>>> average
4.93

9)
>>> x1= -1
>>> y1= 5
>>> x2= 13
>>> y2= -9

10)
>>> from math import sqrt 
>>> distance = sqrt((x1-x2)**2 + (y1-y2)**2)
>>> distance
19.79898987322333


11)>>> from math import log2
>>> x=0.75
>>> info= -log2(float(x))
>>> info
0.4150374992788438

12)


python-002

1)
>>> s = 'fire and ice'
>>> s
'fire and ice'
2)
>>> s[3]
'e'
3)
>>> s[5]
'a'
4)>>> (s[10],s[-1],s[-2])
5)
>>> s[1::2]
'ieadie'
6)
>>> s[::2]
'fr n c'
7)
>>> s[:int((len(s)/2))]
'fire a'
8)
>>> s[::-1]
'eci dna erif'
9)
>>> s.count('i')
2
>>> s.count('e')
2
10)
>>> s.replace('and','&')
'fire & ice'
11)
>>> ('fire') in s
True
12)
>>> ('re and') in s
True
13)
>>> ('re &') in s
False
14)
>>> s.find('e')
3
15)
>>> s.find('e,e')
-1




python_003_functions

1)
>>> def increase (x): 
...     x = x+1
...     return x

>>> increase(2)
3
2)
>>> def add(x,y):
...     sum= (x+y)
...     return sum 
 
>>> add(2,1)
3
3)
>>> def add(x,y,z):
...     sum3= (x+y+z)
...     return sum3
 
4)
>>> def add(x,y,z,i,j):
...     sum5= (x+y+z+i+j)
...     return sum5

5)
>>> def manyTimes(x,y):
...     time= x*y
...     return time

6)
>>> def manyTimes(x,y):
...     new= x*(y + ',')
...     return new
... 

7)
>>> def manyTimes(x,y,sep):
...     new = x*(y+ str(sep))
...     return new
... 
 OR 

>>> def manyTimes(x,y,sep):
...     new = x*(y+ sep)
...     return new













